<?php
/**
 * Paymob Payment Callback Handler
 * 
 * This file handles the callback from Paymob after payment processing
 */

// تضمين ملفات النظام الأساسية
require_once 'config/database.php';
require_once 'includes/functions.php';
require_once 'includes/classes/PaymobPayment.php';

// بدء الجلسة إذا لم تكن قد بدأت بالفعل
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// تسجيل الأخطاء في ملف
function log_error($message) {
    $logDir = dirname(__FILE__) . '/logs';
    if (!file_exists($logDir)) {
        mkdir($logDir, 0755, true);
    }
    
    $logFile = $logDir . '/error_' . date('Y-m-d') . '.log';
    $timestamp = date('Y-m-d H:i:s');
    $errorMessage = "[$timestamp] [ERROR] $message" . PHP_EOL;
    file_put_contents($logFile, $errorMessage, FILE_APPEND);
}

// تسجيل المعلومات في ملف
function log_info($message, $data = []) {
    $logDir = dirname(__FILE__) . '/logs';
    if (!file_exists($logDir)) {
        mkdir($logDir, 0755, true);
    }
    
    $logFile = $logDir . '/debug_' . date('Y-m-d') . '.log';
    $timestamp = date('Y-m-d H:i:s');
    $dataString = !empty($data) ? json_encode($data, JSON_UNESCAPED_UNICODE) : '';
    $logMessage = "[$timestamp] [INFO] $message" . (!empty($dataString) ? " | $dataString" : "") . PHP_EOL;
    file_put_contents($logFile, $logMessage, FILE_APPEND);
}

try {
    // الحصول على البيانات الخام من الطلب
    $rawData = file_get_contents('php://input');
    $data = [];
    
    // محاولة تحليل البيانات الخام كـ JSON
    if (!empty($rawData)) {
        $jsonData = json_decode($rawData, true);
        if (json_last_error() === JSON_ERROR_NONE && !empty($jsonData)) {
            $data = $jsonData;
        }
    }
    
    // إذا لم تكن هناك بيانات خام، استخدم $_POST أو $_GET
    if (empty($data)) {
        $data = !empty($_POST) ? $_POST : $_GET;
    }
    
    // تسجيل بيانات الاستدعاء
    log_info('Received Paymob callback', [
        'post' => $_POST,
        'get' => $_GET,
        'raw' => $rawData
    ]);
    
    // استخدام اتصال قاعدة البيانات الموجود
    global $pdo, $conn;
    
    // إذا لم يكن $pdo موجودًا، قم بإنشائه
    if (!isset($pdo)) {
        // استخدام الثوابت المعرفة في ملف database.php
        $pdo = new PDO(
            "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4",
            DB_USER,
            DB_PASS,
            [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::ATTR_EMULATE_PREPARES => false
            ]
        );
    }
    
    // إنشاء كائن معالجة الدفع
    $payment = new PaymobPayment($pdo);
    
    // معالجة الاستدعاء بشكل يدوي إذا كانت هناك مشكلة في دالة processCallback
    try {
        $result = $payment->processCallback($data);
    } catch (Exception $callbackError) {
        log_error('Error in processCallback: ' . $callbackError->getMessage());
        
        // استخراج معلومات الدفع
        $success = false;
        $transactionId = null;
        $orderId = null;
        $subscriptionId = null;
        
        // محاولة استخراج معلومات الدفع من البيانات
        if (isset($data['obj']) && is_array($data['obj'])) {
            $obj = $data['obj'];
            $success = isset($obj['success']) && $obj['success'] === true;
            $transactionId = isset($obj['id']) ? $obj['id'] : null;
            
            if (isset($obj['order']) && is_array($obj['order'])) {
                $order = $obj['order'];
                $orderId = isset($order['id']) ? $order['id'] : null;
                
                if (isset($order['merchant_order_id'])) {
                    $merchantOrderId = $order['merchant_order_id'];
                    $parts = explode('_', $merchantOrderId);
                    if (count($parts) > 0) {
                        $subscriptionId = $parts[0];
                    }
                }
            }
        } else if (isset($data['success'])) {
            $success = $data['success'] === true || $data['success'] === 'true';
            $transactionId = isset($data['id']) ? $data['id'] : null;
            $orderId = isset($data['order']) ? $data['order'] : null;
            
            if (isset($data['merchant_order_id'])) {
                $merchantOrderId = $data['merchant_order_id'];
                $parts = explode('_', $merchantOrderId);
                if (count($parts) > 0) {
                    $subscriptionId = $parts[0];
                }
            }
        }
        
        log_info('Extracted payment information', [
            'success' => $success,
            'transaction_id' => $transactionId,
            'order_id' => $orderId,
            'subscription_id' => $subscriptionId
        ]);
        
        // البحث عن المعاملة في قاعدة البيانات
        $transaction = null;
        
        // البحث باستخدام معرف المعاملة
        if ($transactionId) {
            $stmt = $pdo->prepare("
                SELECT * FROM payment_transactions 
                WHERE transaction_id = ? 
                ORDER BY created_at DESC 
                LIMIT 1
            ");
            $stmt->execute([$transactionId]);
            $transaction = $stmt->fetch();
        }
        
        // إذا لم يتم العثور على المعاملة، حاول البحث باستخدام معرف الاشتراك
        if (!$transaction && $subscriptionId) {
            $stmt = $pdo->prepare("
                SELECT * FROM payment_transactions 
                WHERE subscription_id = ? 
                ORDER BY created_at DESC 
                LIMIT 1
            ");
            $stmt->execute([$subscriptionId]);
            $transaction = $stmt->fetch();
        }
        
        // إذا لم يتم العثور على المعاملة، حاول البحث باستخدام معرف الطلب
        if (!$transaction && $orderId) {
            $stmt = $pdo->prepare("
                SELECT * FROM payment_transactions 
                WHERE paymob_order_id = ? 
                ORDER BY created_at DESC 
                LIMIT 1
            ");
            $stmt->execute([$orderId]);
            $transaction = $stmt->fetch();
        }
        
        // إذا تم العثور على المعاملة، قم بتحديث حالتها
        if ($transaction) {
            $status = $success ? 'completed' : 'failed';
            $transactionId = $transaction['id'];
            
            try {
                $stmt = $pdo->prepare("
                    UPDATE payment_transactions 
                    SET status = ?, updated_at = NOW() 
                    WHERE id = ?
                ");
                $stmt->execute([$status, $transactionId]);
                log_info('Updated transaction status', ['status' => $status]);
            } catch (PDOException $e) {
                log_error('Error updating transaction status: ' . $e->getMessage());
            }
            
            // إذا كانت المعاملة ناجحة، قم بتحديث الاشتراك
            if ($success) {
                $subscriptionId = $transaction['subscription_id'];
                
                try {
                    $stmt = $pdo->prepare("
                        UPDATE student_subscriptions 
                        SET payment_status = 'paid', 
                            updated_at = NOW() 
                        WHERE id = ?
                    ");
                    $stmt->execute([$subscriptionId]);
                    
                    log_info('Updated student_subscription status', [
                        'subscription_id' => $subscriptionId,
                        'payment_status' => 'paid'
                    ]);
                    
                    // تحديث تاريخ انتهاء الاشتراك إذا لم يكن محددًا
                    $stmt = $pdo->prepare("
                        UPDATE student_subscriptions 
                        SET end_date = DATE_ADD(NOW(), INTERVAL 1 MONTH) 
                        WHERE id = ? AND (end_date IS NULL OR end_date = '')
                    ");
                    $stmt->execute([$subscriptionId]);
                } catch (PDOException $e) {
                    log_error('Error updating student_subscription: ' . $e->getMessage());
                    
                    // حفظ بيانات الاستدعاء الفاشل في جدول failed_callbacks
                    try {
                        $stmt = $pdo->prepare("
                            INSERT INTO failed_callbacks 
                            (callback_type, callback_data, created_at) 
                            VALUES ('paymob', ?, NOW())
                        ");
                        $stmt->execute([json_encode($data)]);
                        log_info('Saved failed callback data for later processing');
                    } catch (PDOException $saveError) {
                        log_error('Error saving failed callback: ' . $saveError->getMessage());
                    }
                }
            }
        } else {
            log_info('No transaction found for the payment', [
                'transaction_id' => $transactionId,
                'order_id' => $orderId,
                'subscription_id' => $subscriptionId
            ]);
            
            // حفظ بيانات الاستدعاء الفاشل في جدول failed_callbacks
            try {
                $stmt = $pdo->prepare("
                    INSERT INTO failed_callbacks 
                    (callback_type, callback_data, created_at) 
                    VALUES ('paymob', ?, NOW())
                ");
                $stmt->execute([json_encode($data)]);
                log_info('Saved callback data for later processing');
            } catch (PDOException $saveError) {
                log_error('Error saving callback: ' . $saveError->getMessage());
            }
        }
    }
    
    // الرد بنجاح
    header('Content-Type: application/json');
    echo json_encode(['success' => true, 'message' => 'Callback processed successfully']);
    
} catch (Exception $e) {
    // تسجيل الخطأ
    log_error('Error processing payment callback: ' . $e->getMessage() . "\nTrace: " . $e->getTraceAsString());
    
    // الرد بنجاح على أي حال لتجنب إعادة المحاولة من باي موب
    header('Content-Type: application/json');
    echo json_encode(['success' => true, 'message' => 'Callback received']);
}
?>
