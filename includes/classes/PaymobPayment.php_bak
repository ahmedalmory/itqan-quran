<?php
/**
 * Paymob Payment Integration Class
 * 
 * This class handles the integration with Paymob payment gateway for the AlQuran subscription system.
 */

// Include debug logger
require_once __DIR__ . '/../debug_logger.php';

class PaymobPayment {
    private $apiKey;
    private $integrationId;
    private $walletIntegrationId;
    private $iframeId;
    private $hmacSecret;
    private $currency;
    private $baseUrl = 'https://accept.paymob.com/api/';
    private $authToken = null;
    private $pdo;
    private $debug = true; // Enable debug mode
    private $enabled;

    /**
     * Constructor
     * 
     * @param PDO $pdo Database connection
     */
    public function __construct($pdo) {
        $this->pdo = $pdo;
        $this->baseUrl = 'https://accept.paymob.com/api/';
        
        // Enable debug mode for development
        $this->debug = true;
        
        // Load settings from database
        $this->loadSettings();
        
        // Log settings for debugging
        if ($this->debug) {
            debug_log("PaymobPayment initialized", 'info', [
                'api_key' => !empty($this->apiKey) ? 'Set' : 'Not set',
                'integration_id' => $this->integrationId,
                'wallet_integration_id' => $this->walletIntegrationId,
                'iframe_id' => $this->iframeId,
                'hmac_secret' => !empty($this->hmacSecret) ? 'Set' : 'Not set',
                'currency' => $this->currency,
                'enabled' => $this->enabled
            ]);
        }
    }

    /**
     * Load payment settings from the database
     */
    private function loadSettings() {
        try {
            $stmt = $this->pdo->prepare("SELECT setting_key, setting_value FROM payment_settings");
            $stmt->execute();
            $settings = $stmt->fetchAll(PDO::FETCH_KEY_PAIR);
            
            $this->apiKey = $settings['paymob_api_key'] ?? '';
            $this->integrationId = $settings['paymob_integration_id'] ?? '';
            $this->walletIntegrationId = $settings['paymob_wallet_integration_id'] ?? '';
            $this->iframeId = $settings['paymob_iframe_id'] ?? '';
            $this->hmacSecret = $settings['paymob_hmac_secret'] ?? '';
            $this->currency = $settings['payment_currency'] ?? 'EGP';
            $this->enabled = $settings['payment_enabled'] ?? '0';
            
            // Convert integration IDs to integer if they're valid numbers
            if (is_numeric($this->integrationId)) {
                $this->integrationId = (int)$this->integrationId;
            } else {
                // Log warning if integration ID is not numeric
                debug_log("Integration ID is not numeric", 'warning', [
                    'integration_id' => $this->integrationId
                ]);
            }
            
            if (is_numeric($this->walletIntegrationId)) {
                $this->walletIntegrationId = (int)$this->walletIntegrationId;
            } else {
                // Log warning if wallet integration ID is not numeric
                debug_log("Wallet Integration ID is not numeric", 'warning', [
                    'wallet_integration_id' => $this->walletIntegrationId
                ]);
            }
            
            if ($this->debug) {
                debug_log("Loaded payment settings", 'info', [
                    'api_key' => !empty($this->apiKey) ? 'Set' : 'Not set',
                    'integration_id' => $this->integrationId,
                    'wallet_integration_id' => $this->walletIntegrationId,
                    'iframe_id' => $this->iframeId,
                    'hmac_secret' => !empty($this->hmacSecret) ? 'Set' : 'Not set',
                    'currency' => $this->currency,
                    'enabled' => $this->enabled
                ]);
            }
        } catch (Exception $e) {
            error_log("Error loading payment settings: " . $e->getMessage());
        }
    }

    /**
     * Check if Paymob payment is configured and enabled
     * 
     * @return bool
     */
    public function isConfigured() {
        // Check if payment is enabled
        if ($this->enabled !== '1') {
            if ($this->debug) {
                debug_log("Paymob payment is not enabled", 'warning', [
                    'enabled' => $this->enabled
                ]);
            }
            return false;
        }
        
        // Check if API key is set
        if (empty($this->apiKey)) {
            if ($this->debug) {
                debug_log("Paymob API key is not set", 'warning');
            }
            return false;
        }
        
        // Check if integration ID is set
        if (empty($this->integrationId)) {
            if ($this->debug) {
                debug_log("Paymob integration ID is not set", 'warning');
            }
            return false;
        }
        
        // Check if iframe ID is set
        if (empty($this->iframeId)) {
            if ($this->debug) {
                debug_log("Paymob iframe ID is not set", 'warning');
            }
            return false;
        }
        
        // Check if integration ID is a valid integer
        if (!is_numeric($this->integrationId)) {
            if ($this->debug) {
                debug_log("Paymob integration ID is not a valid integer", 'warning', [
                    'integration_id' => $this->integrationId
                ]);
            }
            return false;
        }
        
        debug_log("Paymob payment is properly configured", 'info');
        return true;
    }

    /**
     * Get authentication token from Paymob
     * 
     * @return string|null
     */
    private function getAuthToken() {
        if ($this->authToken) {
            return $this->authToken;
        }

        $data = [
            'api_key' => $this->apiKey
        ];

        if ($this->debug) {
            error_log("Requesting auth token with API key: " . substr($this->apiKey, 0, 5) . "...");
        }

        $response = $this->makeApiRequest('auth/tokens', $data);
        
        if (isset($response['token'])) {
            $this->authToken = $response['token'];
            if ($this->debug) {
                error_log("Auth token received successfully");
            }
            return $this->authToken;
        }
        
        error_log("Failed to get auth token from Paymob. Response: " . json_encode($response));
        return null;
    }

    /**
     * Create an order in Paymob
     * 
     * @param int $subscriptionId
     * @param float $amount
     * @param array $items
     * @return int|null Order ID
     */
    private function createOrder($subscriptionId, $amount, $items = []) {
        $token = $this->getAuthToken();
        if (!$token) {
            error_log("Cannot create order: Failed to get authentication token");
            return null;
        }

        $amountCents = round($amount * 100);
        
        // Generate a unique merchant order ID by combining subscription ID with timestamp
        $merchantOrderId = $subscriptionId . '_' . time();
        
        if ($this->debug) {
            error_log("Creating order for subscription ID: $subscriptionId, Amount: $amount ($amountCents cents)");
            error_log("Using merchant order ID: $merchantOrderId");
        }

        $data = [
            'auth_token' => $token,
            'delivery_needed' => false,
            'amount_cents' => $amountCents,
            'currency' => $this->currency,
            'items' => $items,
            'merchant_order_id' => $merchantOrderId
        ];

        if ($this->debug) {
            error_log("Order request data: " . json_encode($data));
        }

        $response = $this->makeApiRequest('ecommerce/orders', $data);
        
        if (isset($response['id'])) {
            if ($this->debug) {
                error_log("Order created successfully with ID: " . $response['id']);
            }
            return $response['id'];
        }
        
        error_log("Failed to create order in Paymob. Response: " . json_encode($response));
        return null;
    }

    /**
     * Get payment key from Paymob
     * 
     * @param int $orderId
     * @param float $amount
     * @param array $billingData
     * @param string $paymentMethod Payment method (card, wallet)
     * @return string|null
     */
    private function getPaymentKey($orderId, $amount, $billingData, $paymentMethod = 'card') {
        $token = $this->getAuthToken();
        if (!$token) {
            error_log("Cannot get payment key: Failed to get authentication token");
            return null;
        }

        $amountCents = round($amount * 100);
        
        // Ensure last_name is not blank
        if (empty($billingData['last_name'])) {
            $billingData['last_name'] = 'Student';
        }
        
        // Determine which integration ID to use based on payment method
        if ($paymentMethod === 'wallet' && !empty($this->walletIntegrationId)) {
            $integrationId = (int)$this->walletIntegrationId;
            debug_log("Using wallet integration ID", 'info', [
                'integration_id' => $integrationId
            ]);
        } else {
            $integrationId = (int)$this->integrationId;
        }
        
        if ($this->debug) {
            error_log("Getting payment key for order ID: $orderId, Amount: $amount ($amountCents cents)");
            error_log("Using integration ID: " . $integrationId);
            error_log("Billing data: " . json_encode($billingData));
        }

        $data = [
            'auth_token' => $token,
            'amount_cents' => $amountCents,
            'expiration' => 3600, // 1 hour
            'order_id' => $orderId,
            'billing_data' => $billingData,
            'currency' => $this->currency,
            'integration_id' => $integrationId,
            'lock_order_when_paid' => true
        ];
        
        // Add source_data for wallet payments
        if ($paymentMethod === 'wallet') {
            // Get the phone number from billing data
            $phone = isset($billingData['phone']) ? $billingData['phone'] : '';
            
            // Remove any spaces or special characters from phone number
            $phone = preg_replace('/[^0-9]/', '', $phone);
            
            // Add Egypt country code if not present
            if (strlen($phone) <= 10 && !preg_match('/^2/', $phone)) {
                $phone = '2' . $phone;
            }
            
            // Add source_data for wallet payments
            $data['source_data'] = [
                'identifier' => $phone,
                'subtype' => 'WALLET',
                'source' => 'AGGREGATOR'
            ];
            
            if ($this->debug) {
                error_log("Added source_data for wallet payment: " . json_encode($data['source_data']));
            }
        }

        $response = $this->makeApiRequest('acceptance/payment_keys', $data);
        
        if (isset($response['token'])) {
            if ($this->debug) {
                error_log("Payment key obtained successfully");
            }
            return $response['token'];
        }
        
        error_log("Failed to get payment key from Paymob. Response: " . json_encode($response));
        return null;
    }

    /**
     * Make API request to Paymob
     * 
     * @param string $endpoint
     * @param array $data
     * @param string $method HTTP method (POST, GET)
     * @return array
     */
    private function makeApiRequest($endpoint, $data, $method = 'POST') {
        $url = $this->baseUrl . $endpoint;
        
        debug_log("Making API request to: $url", 'info', ['endpoint' => $endpoint, 'method' => $method]);
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        
        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        } else {
            // For GET requests
            if (!empty($data)) {
                $url .= '?' . http_build_query($data);
                curl_setopt($ch, CURLOPT_URL, $url);
            }
        }
        
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Disable SSL verification for testing
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); // Disable host verification for testing
        
        $response = curl_exec($ch);
        $error = curl_error($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($error) {
            error_log("Paymob API Error: " . $error);
            debug_log("Paymob API Error: " . $error, 'error', ['endpoint' => $endpoint]);
            return [];
        }
        
        // Log the API response for debugging
        error_log("Paymob API Response for $endpoint: " . $response);
        error_log("Paymob API HTTP Code: " . $httpCode);
        debug_log("Paymob API Response", 'info', [
            'endpoint' => $endpoint,
            'http_code' => $httpCode,
            'response' => substr($response, 0, 500) // Limit response size in log
        ]);
        
        $decoded = json_decode($response, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            error_log("JSON decode error: " . json_last_error_msg());
            error_log("Raw response: " . $response);
            debug_log("JSON decode error: " . json_last_error_msg(), 'error', ['raw_response' => substr($response, 0, 500)]);
            return [];
        }
        
        return $decoded ?? [];
    }

    /**
     * Process payment for a subscription
     * 
     * @param int $subscriptionId
     * @param float $amount
     * @param array $userData
     * @param string $paymentMethod Payment method (card, wallet)
     * @return array
     */
    public function processPayment($subscriptionId, $amount, $userData, $paymentMethod = 'card') {
        if (!$this->isConfigured()) {
            error_log("Paymob payment is not configured properly");
            return [
                'success' => false,
                'message' => 'Paymob payment is not configured properly'
            ];
        }

        if ($this->debug) {
            error_log("Processing payment for subscription ID: $subscriptionId, Amount: $amount, Method: $paymentMethod");
            error_log("User data: " . json_encode($userData));
        }

        // Check if there's a pending transaction for this subscription
        $stmt = $this->pdo->prepare("
            SELECT * FROM payment_transactions 
            WHERE subscription_id = ? AND status = 'pending' 
            ORDER BY created_at DESC LIMIT 1
        ");
        $stmt->execute([$subscriptionId]);
        $pendingTransaction = $stmt->fetch(PDO::FETCH_ASSOC);
        
        // If there's a pending transaction, try to reuse it
        if ($pendingTransaction && !empty($pendingTransaction['paymob_order_id'])) {
            debug_log("Found pending transaction for subscription ID: $subscriptionId", 'info', [
                'transaction_id' => $pendingTransaction['id'],
                'paymob_order_id' => $pendingTransaction['paymob_order_id']
            ]);
            
            // Get payment key for the existing order
            $billingData = $this->prepareBillingData($subscriptionId, $userData);
            
            if ($paymentMethod === 'wallet') {
                // For wallet payments, we need to create a mobile wallet payment token
                $result = $this->createMobileWalletPayment(
                    $pendingTransaction['paymob_order_id'],
                    $amount,
                    $billingData
                );
                
                if ($result['success']) {
                    // Update subscription payment method
                    $this->updateSubscriptionPaymentMethod($subscriptionId, 'paymob_' . $paymentMethod);
                    return $result;
                }
            } else {
                $paymentKey = $this->getPaymentKey($pendingTransaction['paymob_order_id'], $amount, $billingData, $paymentMethod);
                if ($paymentKey) {
                    // Update subscription payment method
                    $this->updateSubscriptionPaymentMethod($subscriptionId, 'paymob_' . $paymentMethod);
                    
                    return [
                        'success' => true,
                        'iframe_url' => "https://accept.paymob.com/api/acceptance/iframes/" . $this->iframeId . "?payment_token=" . $paymentKey,
                        'transaction_id' => $pendingTransaction['id'],
                        'order_id' => $pendingTransaction['paymob_order_id']
                    ];
                }
            }
            
            // If we couldn't get a payment key, delete the old transaction and create a new one
            debug_log("Could not reuse pending transaction, creating a new one", 'info');
        }

        // Create order in Paymob
        $orderId = $this->createOrder($subscriptionId, $amount, [
            [
                'name' => 'Quran Study Subscription',
                'amount_cents' => round($amount * 100),
                'description' => 'Subscription for ' . $subscription['duration_months'] . ' months',
                'quantity' => 1
            ]
        ]);

        if (!$orderId) {
            return [
                'success' => false,
                'message' => 'Failed to create order in Paymob'
            ];
        }

        // Create transaction record
        $transactionId = $this->createTransactionRecord($subscriptionId, $orderId, $amount, 'paymob_' . $paymentMethod);
        if (!$transactionId) {
            error_log("Failed to create transaction record");
            return [
                'success' => false,
                'message' => 'Failed to create transaction record'
            ];
        }

        // Prepare billing data
        $billingData = $this->prepareBillingData($subscriptionId, $userData);

        if ($paymentMethod === 'wallet') {
            // For wallet payments, we need to create a mobile wallet payment token
            $result = $this->createMobileWalletPayment($orderId, $amount, $billingData);
            
            if ($result['success']) {
                // Update subscription payment method
                $this->updateSubscriptionPaymentMethod($subscriptionId, 'paymob_' . $paymentMethod);
                return $result;
            }
            
            return [
                'success' => false,
                'message' => 'Failed to create mobile wallet payment'
            ];
        } else {
            // Get payment key for card payments
            $paymentKey = $this->getPaymentKey($orderId, $amount, $billingData, $paymentMethod);
            if (!$paymentKey) {
                return [
                    'success' => false,
                    'message' => 'Failed to get payment key from Paymob'
                ];
            }

            // Update subscription payment method
            $this->updateSubscriptionPaymentMethod($subscriptionId, 'paymob_' . $paymentMethod);

            return [
                'success' => true,
                'iframe_url' => "https://accept.paymob.com/api/acceptance/iframes/" . $this->iframeId . "?payment_token=" . $paymentKey,
                'transaction_id' => $transactionId,
                'order_id' => $orderId
            ];
        }
    }

    /**
     * Create a mobile wallet payment token
     * 
     * @param int $orderId
     * @param float $amount
     * @param array $billingData
     * @return array
     */
    private function createMobileWalletPayment($orderId, $amount, $billingData) {
        // Validate required parameters
        if (empty($orderId)) {
            error_log("Mobile wallet payment error: Order ID is required");
            return [
                'success' => false,
                'message' => 'Order ID is required for mobile wallet payment'
            ];
        }
        
        if (empty($amount) || !is_numeric($amount) || $amount <= 0) {
            error_log("Mobile wallet payment error: Invalid amount provided");
            return [
                'success' => false,
                'message' => 'Invalid amount for mobile wallet payment'
            ];
        }
        
        // Validate wallet integration ID
        if (empty($this->walletIntegrationId)) {
            error_log("Mobile wallet payment error: Wallet integration ID is not configured");
            return [
                'success' => false,
                'message' => 'Wallet integration ID is not configured. Please check payment settings.'
            ];
        }
        
        // Get authentication token
        $token = $this->getAuthToken();
        if (!$token) {
            error_log("Mobile wallet payment error: Failed to get authentication token");
            return [
                'success' => false,
                'message' => 'Failed to get authentication token'
            ];
        }

        // Validate and format phone number
        if (empty($billingData['phone']) && empty($billingData['wallet_phone'])) {
            error_log("Mobile wallet payment error: Phone number is required for wallet payment");
            return [
                'success' => false,
                'message' => 'Phone number is required for mobile wallet payment'
            ];
        }
        
        // Get the phone number from billing data or wallet_phone parameter
        $phone = $billingData['wallet_phone'] ?? $billingData['phone'] ?? $billingData['phone_number'] ?? '';
        
        // Remove any spaces, dashes, or special characters from phone number
        $phone = preg_replace('/[^0-9]/', '', $phone);
        
        // Validate phone number length
        if (strlen($phone) < 10) {
            error_log("Mobile wallet payment error: Invalid phone number format - too short: " . $phone);
            return [
                'success' => false,
                'message' => 'Invalid phone number format. Phone number must be at least 10 digits.'
            ];
        }
        
        // Handle Egyptian phone numbers specifically
        if (strlen($phone) == 10 && (substr($phone, 0, 1) == '1' || substr($phone, 0, 1) == '0')) {
            // This is likely an Egyptian number without country code
            // If it starts with 0, remove the leading 0
            if (substr($phone, 0, 1) == '0') {
                $phone = substr($phone, 1);
            }
            
            // Add Egypt country code
            $phone = '2' . $phone;
            debug_log("Mobile wallet payment: Added Egypt country code to phone: " . $phone);
        } else if (strlen($phone) == 11 && substr($phone, 0, 1) == '0') {
            // Remove leading 0 and add country code
            $phone = '2' . substr($phone, 1);
            debug_log("Mobile wallet payment: Reformatted Egyptian phone number: " . $phone);
        } else if (!preg_match('/^2/', $phone)) {
            // Add Egypt country code if not present
            $phone = '2' . $phone;
            debug_log("Mobile wallet payment: Added country code to phone: " . $phone);
        }

        try {
            // Create a payment key first
            $paymentKeyData = [
                'auth_token' => $token,
                'amount_cents' => round($amount * 100),
                'expiration' => 3600,
                'order_id' => $orderId,
                'billing_data' => $billingData,
                'currency' => $this->currency,
                'integration_id' => (int)$this->walletIntegrationId,
                'lock_order_when_paid' => true
            ];
            
            debug_log("Getting payment key for mobile wallet", 'info', [
                'order_id' => $orderId,
                'integration_id' => $this->walletIntegrationId
            ]);
            
            $paymentKeyResponse = $this->makeApiRequest('acceptance/payment_keys', $paymentKeyData);
            
            if (!isset($paymentKeyResponse['token'])) {
                error_log("Failed to get payment key for mobile wallet: " . json_encode($paymentKeyResponse));
                return [
                    'success' => false,
                    'message' => 'Failed to get payment key for mobile wallet payment',
                    'error_details' => $paymentKeyResponse
                ];
            }
            
            $paymentKey = $paymentKeyResponse['token'];
            
            // Now create the mobile wallet payment
            $data = [
                'source' => [
                    'identifier' => $phone,
                    'subtype' => 'WALLET'
                ],
                'payment_token' => $paymentKey
            ];

            debug_log("Creating mobile wallet payment", 'info', [
                'order_id' => $orderId,
                'amount' => $amount,
                'phone' => substr($phone, 0, 5) . '****' . substr($phone, -2), // Mask phone number for security
                'integration_id' => $this->walletIntegrationId
            ]);

            $response = $this->makeApiRequest('acceptance/payments/pay', $data);

            // Check for specific error responses
            if (isset($response['error'])) {
                $errorMessage = $response['error'] ?? 'Unknown error';
                error_log("Mobile wallet payment API error: " . $errorMessage);
                
                // Provide more user-friendly error messages based on common errors
                $userMessage = 'Payment gateway error: ' . $errorMessage;
                
                // Check for common error patterns
                if (strpos(strtolower($errorMessage), 'wallet mobile number') !== false) {
                    $userMessage = 'Invalid wallet mobile number. Please check the phone number and try again.';
                } else if (strpos(strtolower($errorMessage), 'integration') !== false) {
                    $userMessage = 'Payment integration error. Please contact support.';
                } else if (strpos(strtolower($errorMessage), 'amount') !== false) {
                    $userMessage = 'Invalid payment amount. Please try again.';
                }
                
                return [
                    'success' => false,
                    'message' => $userMessage,
                    'error_details' => $response
                ];
            }
            
            if (isset($response['detail']) && strpos($response['detail'], 'Authentication') !== false) {
                error_log("Mobile wallet payment authentication error: " . $response['detail']);
                return [
                    'success' => false,
                    'message' => 'Authentication error with payment gateway. Please check API credentials.',
                    'error_details' => $response
                ];
            }

            if (isset($response['redirect_url'])) {
                debug_log("Mobile wallet payment created successfully with redirect URL", 'info', [
                    'order_id' => $orderId,
                    'redirect_url' => $response['redirect_url']
                ]);
                return [
                    'success' => true,
                    'redirect_url' => $response['redirect_url']
                ];
            } elseif (isset($response['id'])) {
                // If we get an ID but no redirect URL, we need to redirect to the mobile wallet page
                debug_log("Mobile wallet payment created successfully with ID: " . $response['id'], 'info');
                return [
                    'success' => true,
                    'redirect_url' => "https://accept.paymob.com/api/acceptance/payments/" . $response['id'] . "/pay"
                ];
            }

            // If we reach here, something unexpected happened
            error_log("Failed to create mobile wallet payment. Unexpected response: " . json_encode($response));
            return [
                'success' => false,
                'message' => 'Failed to create mobile wallet payment. Unexpected response from payment gateway.',
                'error_details' => $response
            ];
        } catch (Exception $e) {
            error_log("Mobile wallet payment exception: " . $e->getMessage());
            return [
                'success' => false,
                'message' => 'An error occurred while processing mobile wallet payment: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Create a response for wallet payment that will use POST method
     * 
     * @param string $paymentKey
     * @param int $transactionId
     * @param int $orderId
     * @return array
     */
    private function createWalletPaymentResponse($paymentKey, $transactionId, $orderId) {
        // Create HTML form that will auto-submit via POST
        $formHtml = '
        <!DOCTYPE html>
        <html>
        <head>
            <title>Redirecting to Payment...</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    text-align: center;
                    padding-top: 50px;
                    background-color: #f8f9fa;
                }
                .container {
                    max-width: 500px;
                    margin: 0 auto;
                    padding: 20px;
                    background-color: white;
                    border-radius: 10px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .loader {
                    border: 5px solid #f3f3f3;
                    border-radius: 50%;
                    border-top: 5px solid #3498db;
                    width: 50px;
                    height: 50px;
                    animation: spin 1s linear infinite;
                    margin: 20px auto;
                }
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                .message {
                    margin-top: 20px;
                    color: #666;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h2>جاري تحويلك إلى صفحة الدفع...</h2>
                <div class="loader"></div>
                <p class="message">يرجى الانتظار، سيتم تحويلك تلقائيًا.</p>
                <form id="paymobForm" method="POST" action="https://accept.paymob.com/api/acceptance/payments/pay">
                    <input type="hidden" name="payment_token" value="' . $paymentKey . '">
                </form>
            </div>
            <script>
                document.addEventListener("DOMContentLoaded", function() {
                    setTimeout(function() {
                        document.getElementById("paymobForm").submit();
                    }, 1500);
                });
            </script>
        </body>
        </html>
        ';
        
        // Return success with HTML content
        return [
            'success' => true,
            'html_content' => $formHtml,
            'transaction_id' => $transactionId,
            'order_id' => $orderId
        ];
    }

    /**
     * Create a transaction record in the database
     * 
     * @param int $subscriptionId
     * @param int $orderId
     * @param float $amount
     * @param string $paymentMethod Payment method (paymob_card, paymob_wallet)
     * @return int|null Transaction ID
     */
    private function createTransactionRecord($subscriptionId, $orderId, $amount, $paymentMethod = 'paymob_card') {
        try {
            // Check if a transaction already exists for this order
            $stmt = $this->pdo->prepare("SELECT id FROM payment_transactions WHERE paymob_order_id = ?");
            $stmt->execute([$orderId]);
            $existingTransaction = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if ($existingTransaction) {
                if ($this->debug) {
                    error_log("Transaction already exists for order ID: $orderId, Transaction ID: " . $existingTransaction['id']);
                }
                return $existingTransaction['id'];
            }
            
            $stmt = $this->pdo->prepare("
                INSERT INTO payment_transactions 
                (subscription_id, payment_method, amount, currency, status, paymob_order_id) 
                VALUES (?, ?, ?, ?, 'pending', ?)
            ");
            $stmt->execute([$subscriptionId, $paymentMethod, $amount, $this->currency, $orderId]);
            $transactionId = $this->pdo->lastInsertId();
            
            if ($this->debug) {
                error_log("Created transaction record: $transactionId for subscription: $subscriptionId, order: $orderId");
            }
            
            return $transactionId;
        } catch (PDOException $e) {
            error_log("Error creating transaction record: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Prepare billing data for Paymob
     * 
     * @param int $subscriptionId
     * @param array $userData
     * @return array
     */
    private function prepareBillingData($subscriptionId, $userData) {
        // Get student details
        $stmt = $this->pdo->prepare("SELECT * FROM users WHERE id = (SELECT student_id FROM student_subscriptions WHERE id = ?)");
        $stmt->execute([$subscriptionId]);
        $student = $stmt->fetch(PDO::FETCH_ASSOC);
        
        // Default values for required fields
        $defaultFirstName = 'Student';
        $defaultLastName = 'User';
        $defaultEmail = 'student@example.com';
        $defaultPhone = '01000000000';
        
        // Prepare billing data
        $billingData = [
            'apartment' => 'NA',
            'email' => $student['email'] ?? $userData['email'] ?? $defaultEmail,
            'floor' => 'NA',
            'first_name' => $student['first_name'] ?? $userData['first_name'] ?? $student['name'] ?? $defaultFirstName,
            'street' => 'NA',
            'building' => 'NA',
            'phone_number' => $student['phone'] ?? $userData['phone'] ?? $defaultPhone,
            'shipping_method' => 'NA',
            'postal_code' => 'NA',
            'city' => 'NA',
            'country' => 'EG',
            'last_name' => $student['last_name'] ?? $userData['last_name'] ?? $defaultLastName,
            'state' => 'NA'
        ];
        
        // Ensure no empty values in required fields
        foreach (['first_name', 'last_name', 'email', 'phone_number'] as $field) {
            if (empty($billingData[$field])) {
                switch ($field) {
                    case 'first_name':
                        $billingData[$field] = $defaultFirstName;
                        break;
                    case 'last_name':
                        $billingData[$field] = $defaultLastName;
                        break;
                    case 'email':
                        $billingData[$field] = $defaultEmail;
                        break;
                    case 'phone_number':
                        $billingData[$field] = $defaultPhone;
                        break;
                }
            }
        }
        
        // Additional check to ensure last_name is never blank
        if (empty($billingData['last_name']) || $billingData['last_name'] === 'NA') {
            $billingData['last_name'] = $defaultLastName;
            debug_log("Last name was empty, using default value", 'info', [
                'last_name' => $defaultLastName
            ]);
        }

        return $billingData;
    }

    /**
     * Process callback from Paymob
     * 
     * @param array $data
     * @return bool
     */
    public function processCallback($data) {
        // Log the full callback data
        debug_log("Processing Paymob callback", 'info', [
            'data' => json_encode(array_slice($data, 0, 10)) // Log first 10 elements to avoid huge logs
        ]);
        
        // Check if data is empty
        if (empty($data)) {
            debug_log("Empty callback data", 'error');
            return false;
        }
        
        // Check if hmac is present for verification
        if (isset($data['hmac'])) {
            // Verify HMAC
            if (!$this->verifyHmac($data)) {
                debug_log("Invalid HMAC signature in Paymob callback", 'error', [
                    'received_hmac' => $data['hmac']
                ]);
                
                // Continue processing even with invalid HMAC for testing
                debug_log("Continuing despite invalid HMAC for testing purposes", 'warning');
            } else {
                debug_log("HMAC verification successful", 'info');
            }
        } else {
            debug_log("No HMAC found in callback data", 'warning');
            // Continue processing even without HMAC for testing
        }

        // Extract transaction data
        $transactionData = $data['obj'] ?? null;
        
        // If obj is not present, this might be a direct GET callback
        if (!$transactionData && isset($data['order']) && isset($data['success'])) {
            debug_log("Direct GET callback detected, creating transaction data structure", 'info');
            $transactionData = [
                'id' => $data['id'] ?? null,
                'success' => $data['success'] === 'true',
                'order' => [
                    'id' => $data['order']
                ]
            ];
        }
        
        if (!$transactionData) {
            debug_log("Missing transaction data in Paymob callback", 'error');
            return false;
        }
        
        $orderId = $transactionData['order']['id'] ?? null;
        if (!$orderId) {
            debug_log("Missing order ID in Paymob callback", 'error');
            return false;
        }

        debug_log("Found order ID in callback", 'info', ['order_id' => $orderId]);

        // Get transaction by order ID
        $stmt = $this->pdo->prepare("
            SELECT * FROM payment_transactions 
            WHERE paymob_order_id = ?
        ");
        $stmt->execute([$orderId]);
        $transaction = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$transaction) {
            debug_log("Transaction not found for order ID", 'error', ['order_id' => $orderId]);
            return false;
        }

        $success = ($transactionData['success'] === true);
        $status = $success ? 'success' : 'failed';
        $paymentStatus = $success ? 'paid' : 'failed';
        $transactionId = $transactionData['id'] ?? null;

        debug_log("Updating transaction status", 'info', [
            'transaction_id' => $transaction['id'],
            'paymob_transaction_id' => $transactionId,
            'status' => $status,
            'success' => $success
        ]);

        try {
            $this->pdo->beginTransaction();
            
            // Update transaction
            $stmt = $this->pdo->prepare("
                UPDATE payment_transactions 
                SET status = ?, 
                    paymob_transaction_id = ?, 
                    paymob_response = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            ");
            $stmt->execute([
                $status, 
                $transactionId, 
                json_encode($data), 
                $transaction['id']
            ]);
            
            // Update subscription payment status
            $stmt = $this->pdo->prepare("
                UPDATE student_subscriptions 
                SET payment_status = ?, 
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
            ");
            $stmt->execute([
                $paymentStatus, 
                $transaction['subscription_id']
            ]);
            
            $this->pdo->commit();
            
            debug_log("Transaction and subscription updated successfully", 'info', [
                'transaction_id' => $transaction['id'],
                'subscription_id' => $transaction['subscription_id'],
                'status' => $status
            ]);
            
            return true;
        } catch (Exception $e) {
            $this->pdo->rollBack();
            debug_log("Failed to update transaction", 'error', [
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * Verify HMAC signature from Paymob
     * 
     * @param array $data
     * @return bool
     */
    private function verifyHmac($data) {
        if (empty($this->hmacSecret) || empty($data['hmac'])) {
            debug_log("Missing HMAC secret or HMAC in data", 'error', [
                'has_secret' => !empty($this->hmacSecret),
                'has_hmac' => !empty($data['hmac'])
            ]);
            return false;
        }

        $receivedHmac = $data['hmac'];
        
        // Create a copy of data without hmac
        $dataToHash = $data;
        unset($dataToHash['hmac']);
        
        // For debugging
        debug_log("Verifying HMAC", 'info', [
            'received_hmac' => $receivedHmac,
            'hmac_secret_length' => strlen($this->hmacSecret)
        ]);
        
        // Try multiple methods of HMAC calculation (Paymob documentation is not clear)
        
        // Method 1: Sort array by key and concatenate values
        ksort($dataToHash);
        $concatenatedString = '';
        foreach ($dataToHash as $key => $value) {
            if (is_array($value)) {
                $value = json_encode($value);
            }
            $concatenatedString .= $value;
        }
        
        $calculatedHmac1 = hash_hmac('sha512', $concatenatedString, $this->hmacSecret);
        
        // Method 2: Just use the JSON string
        $jsonString = json_encode($dataToHash);
        $calculatedHmac2 = hash_hmac('sha512', $jsonString, $this->hmacSecret);
        
        // Method 3: For GET requests
        $calculatedHmac3 = '';
        if (isset($dataToHash['order'])) {
            // Create a string of key-value pairs in the format that Paymob might be using
            $pairs = [];
            foreach ($dataToHash as $key => $value) {
                if (!is_array($value)) {
                    $pairs[] = $key . '=' . $value;
                }
            }
            $queryString = implode('&', $pairs);
            $calculatedHmac3 = hash_hmac('sha512', $queryString, $this->hmacSecret);
        }
        
        debug_log("HMAC calculation results", 'info', [
            'method1' => $calculatedHmac1,
            'method2' => $calculatedHmac2,
            'method3' => $calculatedHmac3,
            'received' => $receivedHmac
        ]);
        
        // Accept any method for now
        return ($calculatedHmac1 === $receivedHmac || 
                $calculatedHmac2 === $receivedHmac || 
                $calculatedHmac3 === $receivedHmac);
    }

    /**
     * Get transaction status
     * 
     * @param int $transactionId
     * @return array
     */
    public function getTransactionStatus($transactionId) {
        $stmt = $this->pdo->prepare("
            SELECT * FROM payment_transactions 
            WHERE id = ?
        ");
        $stmt->execute([$transactionId]);
        $transaction = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$transaction) {
            return [
                'success' => false,
                'message' => 'Transaction not found'
            ];
        }

        return [
            'success' => true,
            'transaction' => $transaction
        ];
    }

    /**
     * Update the subscription payment method
     * 
     * @param int $subscriptionId
     * @param string $paymentMethod
     * @return bool
     */
    private function updateSubscriptionPaymentMethod($subscriptionId, $paymentMethod = 'paymob') {
        try {
            $stmt = $this->pdo->prepare("
                UPDATE student_subscriptions 
                SET payment_method = ? 
                WHERE id = ?
            ");
            $stmt->execute([$paymentMethod, $subscriptionId]);
            return true;
        } catch (PDOException $e) {
            error_log("Error updating subscription payment method: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Verify transaction status directly with Paymob API
     * 
     * @param string $transactionId Paymob transaction ID
     * @return array Status information
     */
    public function verifyTransactionWithPaymob($transactionId) {
        debug_log("Verifying transaction with Paymob API", 'info', [
            'transaction_id' => $transactionId
        ]);
        
        if (empty($transactionId)) {
            debug_log("Empty transaction ID for verification", 'error');
            return [
                'success' => false,
                'message' => 'Transaction ID is required'
            ];
        }
        
        $token = $this->getAuthToken();
        if (!$token) {
            debug_log("Failed to get auth token for transaction verification", 'error');
            return [
                'success' => false,
                'message' => 'Failed to authenticate with Paymob'
            ];
        }
        
        $data = [
            'auth_token' => $token,
            'transaction_id' => $transactionId
        ];
        
        $response = $this->makeApiRequest('acceptance/transactions/' . $transactionId, $data, 'GET');
        
        if (empty($response)) {
            debug_log("Empty response from Paymob for transaction verification", 'error', [
                'transaction_id' => $transactionId
            ]);
            return [
                'success' => false,
                'message' => 'Failed to get transaction details from Paymob'
            ];
        }
        
        debug_log("Received transaction verification from Paymob", 'info', [
            'transaction_id' => $transactionId,
            'success' => isset($response['success']) ? $response['success'] : 'unknown',
            'status' => isset($response['data']['success']) ? 'success' : 'failed'
        ]);
        
        return [
            'success' => true,
            'transaction_data' => $response,
            'is_successful' => isset($response['success']) && $response['success'] === true
        ];
    }
}
?>
